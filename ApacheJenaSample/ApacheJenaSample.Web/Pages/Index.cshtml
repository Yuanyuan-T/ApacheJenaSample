@page
@model IndexModel
@{
    ViewData["Title"] = "SPARQL Graph Example";
}

<style type="text/css" media="screen">
    #editor {
        width: 100%;
        min-height: 500px;
    }

    #mynetwork {
        width: 100%;
        height: 500px;
        border: 1px solid lightgray;
    }
</style>

<div class="container">
    <h1>SPARQL Query</h1>
    <div class="row">
        <div class="col-md-12">
            <p>You can use this page to query Apache Jena using SPARQL Queries</p>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4 mb-3">
            <label for="sparqlEndpoint">SPARQL Endpoint</label>
            <input type="text" class="form-control" id="sparqlEndpoint" placeholder="/sparql/endpoint" value="http://localhost:3030/aviation/query" required>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6 mb-3">
            <label for="editor">Query</label>
            <pre id="editor" class="mb-0">PREFIX xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt;
PREFIX flight: &lt;http://www.bytefish.de/aviation/Flight#&gt;
PREFIX : &lt;.&gt;

CONSTRUCT { ?s ?p ?o }
WHERE {
  ?flight flight:tail_number "N965UW" .
  ?flight flight:flight_number "1981" .
  ?flight flight:flight_date "2014-03-18T00:00:00"^^xsd:dateTime .
  ?flight (<>|!<>)* ?s . 
  ?s ?p ?o 
}
</pre>

        </div>
        <div class="col-md-6 mb-3">
            <label for="mynetwork">Graph</label>
            <div id="mynetwork"></div>
        </div>

    </div>

    <div class="row">
        <div class="col-md-12 mb-3">
            <button id="buttonSendQuery" class="btn btn-primary">Execute Query</button>
        </div>
    </div>

</div>

<script>
    var editor = ace.edit("editor");

    editor.setTheme("ace/theme/twilight");
    editor.session.setMode("ace/mode/sparql");

</script>

<script type="text/javascript">

    window.onload = function () {

        document.querySelector("#buttonSendQuery").onclick = function () {

            var sparqlEndpoint = document
                .querySelector("#sparqlEndpoint")
                .value;

            var sparqlQuery = ace
                .edit("editor")
                .getValue();

            // Construct the Base URL:
            var url = new URL('https://localhost:44321/api/graph/query');

            var params = {
                sparqlEndpoint: sparqlEndpoint,
                sparqlQuery: sparqlQuery
            };

            // Append the Search Parameters:
            url.search = new URLSearchParams(params).toString();

            fetch(url)
                // Wait for the Response:
                .then((response) => {
                    // Then process the JSON:
                    response.json().then((data) => {

                        // Log the data :
                        console.log(data);

                        var options = {
                            edges: {
                                font: {
                                    align: 'middle'
                                },
                                arrows: {
                                    to: { enabled: true },
                                    from: { enabled: false }
                                }
                            }
                        };

                        var data = {
                            nodes: new vis.DataSet(data.nodes),
                            edges: new vis.DataSet(data.edges)
                        };

                        var container = document.getElementById('mynetwork');

                        new vis.Network(container, data, options);
                    });
                })
                .catch((err) => {
                    alert("Fetching Graph Schema Failed: " + err);
                });
        };
    };

</script>
